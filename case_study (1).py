# -*- coding: utf-8 -*-
"""CASE_STUDY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1keh4RiHYfSEiek7lMiZfd2UzdJnSKFKH
"""



import pandas as pd
import os

df = pd.read_excel('/content/Data.xlsx')

df.head()

df

# @title Kudal: Mean Wave Direction

from matplotlib import pyplot as plt
df['Kudal: Mean Wave Direction'].plot(kind='line', figsize=(8, 4), title='Kudal: Mean Wave Direction')
plt.gca().spines[['top', 'right']].set_visible(False)

# @title Wave Period over Time

import matplotlib.pyplot as plt
plt.plot(df['Time'], df['Kudal: Wave Period, T02'])
plt.xlabel('Time')
_ = plt.ylabel('Wave Period')

# @title Time vs Kudal: Sign. Wave Height

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['Time']
  ys = series['Kudal: Sign. Wave Height']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = df.sort_values('Time', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('Time')
_ = plt.ylabel('Kudal: Sign. Wave Height')

df['Time'] = pd.to_datetime(df['Time'], format='%Y-%m-%d %H:%M:%S')

df.head()

df['Time_in_hours'] = df['Time'].dt.hour

df

# prompt: divide df as df_train and df_test in 10000 as df tran data

import pandas as pd

# Convert the NumPy arrays to Pandas DataFrames
ff_df = pd.DataFrame(ff)
ff_test_df = pd.DataFrame(ff_test)

# Divide the DataFrame into train and test sets
ff_train = ff_df.iloc[:15000, :]
ff_test = ff_test_df.iloc[15000:, :]



print(df.loc[10000]['Time'])

df_train = df[df['Time'] < pd.to_datetime('2004-11-05 00:00:00')]
df_test = df[df['Time'] >= pd.to_datetime('2004-11-05 00:00:00')]

df_train = df_train.drop('Time_in_hours', axis=1)
df_test = df_test.drop('Time_in_hours', axis=1)

print(df_train.head())
print(df_test.head())

spots_train = df_train['Kudal: Sign. Wave Height'].tolist()
spots_test = df_test['Kudal: Sign. Wave Height'].tolist()

print("Training set has {} observations.".format(len(spots_train)))
print("Test set has {} observations.".format(len(spots_test)))

import numpy as np

def to_sequences(seq_size, obs):
    x = []
    y = []

    for i in range(len(obs)-SEQUENCE_SIZE):
        #print(i)
        window = obs[i:(i+SEQUENCE_SIZE)]
        after_window = obs[i+SEQUENCE_SIZE]
        window = [[x] for x in window]
        #print("{} - {}".format(window,after_window))
        x.append(window)
        y.append(after_window)

    return np.array(x),np.array(y)


SEQUENCE_SIZE = 61
x_train,y_train = to_sequences(SEQUENCE_SIZE,spots_train)
x_test,y_test = to_sequences(SEQUENCE_SIZE,spots_test)

print("Shape of training set: {}".format(x_train.shape))
print("Shape of test set: {}".format(x_test.shape))

print(x_train.shape)

from tensorflow import keras
from tensorflow.keras import layers

def transformer_encoder(inputs, head_size, num_heads, ff_dim, dropout=0):
    # Normalization and Attention
    x = layers.LayerNormalization(epsilon=1e-6)(inputs)
    x = layers.MultiHeadAttention(
        key_dim=head_size, num_heads=num_heads, dropout=dropout
    )(x, x)
    x = layers.Dropout(dropout)(x)
    res = x + inputs

    # Feed Forward Part
    x = layers.LayerNormalization(epsilon=1e-6)(res)
    x = layers.Conv1D(filters=ff_dim, kernel_size=1, activation="relu")(x)
    x = layers.Conv1D(filters=ff_dim, kernel_size=1, activation="relu")(x)
    x = layers.Dropout(dropout)(x)
    x = layers.Conv1D(filters=inputs.shape[-1], kernel_size=1)(x)
    return x + res

def build_model(
    input_shape,
    head_size,
    num_heads,
    ff_dim,
    num_transformer_blocks,
    mlp_units,
    dropout=0,
    mlp_dropout=0,
):
    inputs = keras.Input(shape=input_shape)
    x = inputs
    for _ in range(num_transformer_blocks):
        x = transformer_encoder(x, head_size, num_heads, ff_dim, dropout)

    x = layers.GlobalAveragePooling1D(data_format="channels_first")(x)
    for dim in mlp_units:
        x = layers.Dense(dim, activation="relu")(x)
        x = layers.Dropout(mlp_dropout)(x)
    outputs = layers.Dense(1)(x)
    return keras.Model(inputs, outputs)

input_shape = x_train.shape[1:]

model = build_model(
    input_shape,
    head_size=256,
    num_heads=4,
    ff_dim=4,
    num_transformer_blocks=4,
    mlp_units=[128],
    mlp_dropout=0.4,
    dropout=0.25,
)

model.compile(
    loss="mean_squared_error",
    optimizer=keras.optimizers.Adam(learning_rate=1e-4)
)
#model.summary()

callbacks = [keras.callbacks.EarlyStopping(patience=10, \
    restore_best_weights=True)]

model.fit(
    x_train,
    y_train,
    validation_split=0.2,
    epochs=10,
    batch_size=64,
    callbacks=callbacks,
)

from sklearn import metrics

pred = model.predict(x_test)
score = np.sqrt(metrics.mean_squared_error(pred,y_test))
print("Score (RMSE): {}".format(score))

import matplotlib.pyplot as plt

plt.plot(y_test,color='blue')
plt.plot(pred,color='red')
plt.title('Prediction of Test Data')
plt.xlabel('Time')
plt.ylabel('Kudal: Sign. Wave Height')
plt.legend(['Actual','Predicted'],loc='upper left')
plt.show()

temp_input = y_test[-61:].tolist()


lst_output = []


for i in range(10):

    x_input = np.array(temp_input)


    x_input = x_input.reshape((1, 61, 1))


    yhat = model.predict(x_input, verbose=0)


    lst_output.append(yhat[0][0])


    temp_input.append(yhat[0][0])


    temp_input = temp_input[1:]

# Plot the predictions
plt.plot(lst_output)
plt.show()

import datetime


time_str = input("Enter the time in the format 1998-01-02 00:00:00: ")


time_obj = datetime.datetime.strptime(time_str, "%Y-%m-%d %H:%M:%S")

timestamp = time_obj.timestamp()

timestamps = [timestamp - (60 * 60 * 24 * i) for i in range(61)]

x_input = np.array(timestamps)

x_input = x_input.reshape((1, 61, 1))


yhat = model.predict(x_input, verbose=0)

print("The predicted wave height at", time_str, "is", yhat[0][0])